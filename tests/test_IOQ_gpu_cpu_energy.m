% Make sure that cpu and gpu versions of IOQ output the same thing.

%% 3holes
BLOCK_SIZE = 8000;
LAP_TYPE = 'conn';
PLOT = false;
FACE0 = 1; THETA0 = 0; DEGREE = 4; GVEC = [1,0,0];
INIT_BETA_P = 'round';
N_ITER = 1000;
SEED = 112;
fp = '../data/genus1_small/3holes.off';
m = Mesh(fp); nv = m.nV; V = m.V; F = m.F; ng2 = m.genus*2;

% [d0, ~] = get_exterior_derivatives(m);
% L = d0'*d0;
% gd = gpuDevice();
% tic
% Lp = double(block_inv_gpu(full(L + 1/nv), BLOCK_SIZE) - 1/nv);
% wait(gd); toc
%Lp = inv(L+1/nv) - 1/nv;

%% Option 1a

print_header('Option 1a');

print_header('cpu');
rng(SEED);
[alpha_P1,beta_P1,~,E_hist1,m_hist1] = IOQ_highgenus(V, F, ...
    'Laplacian', LAP_TYPE,...
    'Plot', PLOT,...
    'Iterations', N_ITER, ...
    'highg_method', 'option1a', ...
    'beta_P', INIT_BETA_P);
k1 = [alpha_P1; beta_P1];
m1 = TCODS(m, 'k', k1, 'f0', FACE0, 'theta0', THETA0, 'degree', DEGREE, 'CreateFField', true);
E1 = m1.miq_energy;

print_header('gpu kernel');
rng(SEED);
[alpha_P2,beta_P2,~,E_hist2,m_hist2] = IOQ_highgenus_gpu(V, F, ...
    'Laplacian', LAP_TYPE,...
    'Plot', PLOT,...
    'Iterations', N_ITER, ...
    'highg_method', 'option1a', ...
    'beta_P', INIT_BETA_P);
k2 = [alpha_P2; beta_P2];
m2 = TCODS(m, 'k', k2, 'f0', FACE0, 'theta0', THETA0, 'degree', DEGREE, 'CreateFField', true);
E2 = m2.miq_energy;

assert(check_norm('E1', 'E2', 'Log', -1), 'Option 1 failed!');

print_header('gpu bsx');
rng(SEED);
[alpha_P2,beta_P2,~,E_hist2,m_hist2] = IOQ_highgenus_gpu(V, F, ...
    'Laplacian', LAP_TYPE,...
    'Plot', PLOT,...
    'Iterations', N_ITER, ...
    'highg_method', 'option1a', ...
    'beta_P', INIT_BETA_P, ...
    'bsx', true);
k2 = [alpha_P2; beta_P2];
m2 = TCODS(m, 'k', k2, 'f0', FACE0, 'theta0', THETA0, 'degree', DEGREE, 'CreateFField', true);
E2 = m2.miq_energy;

assert(check_norm('E1', 'E2', 'Log', -1), 'Option 1a failed!');
assert(check_norm('E1', '12.1825', 'Log', -1, 'Tol', 1e-6));
assert(check_norm('E2', '12.1825', 'Log', -1, 'Tol', 1e-6));

%% Option 1b

print_header('Option 1b');

print_header('cpu');
rng(SEED);
[alpha_P1,beta_P1,~,E_hist1,m_hist1] = IOQ_highgenus(V, F, ...
    'Laplacian', LAP_TYPE,...
    'Plot', PLOT,...
    'Iterations', N_ITER, ...
    'highg_method', 'option1b', ...
    'beta_P', INIT_BETA_P);
k1 = [alpha_P1; beta_P1];
m1 = TCODS(m, 'k', k1, 'f0', FACE0, 'theta0', THETA0, 'degree', DEGREE, 'CreateFField', true);
E1 = m1.miq_energy;

print_header('gpu');
rng(SEED);
[alpha_P2,beta_P2,~,E_hist2,m_hist2] = IOQ_highgenus_gpu(V, F, ...
    'Laplacian', LAP_TYPE,...
    'Plot', PLOT,...
    'Iterations', N_ITER, ...
    'highg_method', 'option1b', ...
    'beta_P', INIT_BETA_P);
k2 = [alpha_P2; beta_P2];
m2 = TCODS(m, 'k', k2, 'f0', FACE0, 'theta0', THETA0, 'degree', DEGREE, 'CreateFField', true);
E2 = m2.miq_energy;

assert(check_norm('E1', 'E2', 'Log', -1), 'Option 1b failed!');
%assert(check_norm('E1', '12.1825', 'Log', -1, 'Tol', 1e-6));
%assert(check_norm('E2', '12.1825', 'Log', -1, 'Tol', 1e-6));

%% Option 2

print_header('Option 2 (n=1)');

print_header('cpu');
rng(SEED);
[alpha_P1,beta_P1,~,E_hist1,m_hist1] = IOQ_highgenus(V, F, ...
    'Laplacian', LAP_TYPE,...
    'Plot', PLOT,...
    'Iterations', N_ITER, ...
    'highg_method', 'option2', ...
    'beta_P', INIT_BETA_P);
k1 = [alpha_P1; beta_P1];
m1 = TCODS(m, 'k', k1, 'f0', FACE0, 'theta0', THETA0, 'degree', DEGREE, 'CreateFField', true);
E1 = m1.miq_energy;
assert(check_norm('E1', '12.701210127781587644', 'Log', -1, 'Tol', 1e-10));

print_header('gpu');
rng(SEED);
[alpha_P2,beta_P2,~,E_hist2,m_hist2] = IOQ_highgenus_gpu(V, F, ...
    'Laplacian', LAP_TYPE,...
    'Plot', PLOT,...
    'Iterations', N_ITER, ...
    'highg_method', 'option2', ...
    'beta_P', INIT_BETA_P);
k2 = [alpha_P2; beta_P2];
m2 = TCODS(m, 'k', k2, 'f0', FACE0, 'theta0', THETA0, 'degree', DEGREE, 'CreateFField', true);
E2 = m2.miq_energy;

assert(check_norm('E1', 'E2', 'Log', -1), 'Option 2 failed!');

print_header('Option 2 (n=2)');

print_header('cpu');
rng(SEED);
[alpha_P1,beta_P1,~,E_hist1,m_hist1] = IOQ_highgenus(V, F, ...
    'Laplacian', LAP_TYPE,...
    'Plot', PLOT,...
    'Iterations', N_ITER, ...
    'highg_method', 'option2', ...
    'beta_P', INIT_BETA_P, ...
    'n_alternating', 2);
k1 = [alpha_P1; beta_P1];
m1 = TCODS(m, 'k', k1, 'f0', FACE0, 'theta0', THETA0, 'degree', DEGREE, 'CreateFField', true);
E1 = m1.miq_energy;

print_header('gpu');
rng(SEED);
[alpha_P2,beta_P2,~,E_hist2,m_hist2] = IOQ_highgenus_gpu(V, F, ...
    'Laplacian', LAP_TYPE,...
    'Plot', PLOT,...
    'Iterations', N_ITER, ...
    'highg_method', 'option2', ...
    'beta_P', INIT_BETA_P, ...
    'n_alternating', 2);
k2 = [alpha_P2; beta_P2];
m2 = TCODS(m, 'k', k2, 'f0', FACE0, 'theta0', THETA0, 'degree', DEGREE, 'CreateFField', true);
E2 = m2.miq_energy;

assert(check_norm('E1', 'E2', 'Log', -1), 'Option 2 failed!');

%% Option 2 optimized

print_header('Option 2 (n=1), kernel');

print_header('cpu');
rng(SEED);
[alpha_P1,beta_P1,~,E_hist1,m_hist1] = IOQ_highgenus(V, F, ...
    'Laplacian', LAP_TYPE,...
    'Plot', PLOT,...
    'Iterations', N_ITER, ...
    'highg_method', 'option2_optimized', ...
    'beta_P', INIT_BETA_P);
k1 = [alpha_P1; beta_P1];
m1 = TCODS(m, 'k', k1, 'f0', FACE0, 'theta0', THETA0, 'degree', DEGREE, 'CreateFField', true);
E1 = m1.miq_energy;
assert(check_norm('E1', '12.701210127781587644', 'Log', -1, 'Tol', 1e-10));

print_header('gpu');
rng(SEED);
[alpha_P2,beta_P2,~,E_hist2,m_hist2] = IOQ_highgenus_gpu(V, F, ...
    'Laplacian', LAP_TYPE,...
    'Plot', PLOT,...
    'Iterations', N_ITER, ...
    'highg_method', 'option2_optimized', ...
    'beta_P', INIT_BETA_P);
k2 = [alpha_P2; beta_P2];
m2 = TCODS(m, 'k', k2, 'f0', FACE0, 'theta0', THETA0, 'degree', DEGREE, 'CreateFField', true);
E2 = m2.miq_energy;

assert(check_norm('E1', 'E2', 'Log', -1), 'Option 2 optimized failed!');

print_header('Option 2 (n=2), kernel');

print_header('cpu');
rng(SEED);
[alpha_P1,beta_P1,~,E_hist1,m_hist1] = IOQ_highgenus(V, F, ...
    'Laplacian', LAP_TYPE,...
    'Plot', PLOT,...
    'Iterations', N_ITER, ...
    'highg_method', 'option2_optimized', ...
    'beta_P', INIT_BETA_P, ...
    'n_alternating', 2);
k1 = [alpha_P1; beta_P1];
m1 = TCODS(m, 'k', k1, 'f0', FACE0, 'theta0', THETA0, 'degree', DEGREE, 'CreateFField', true);
E1 = m1.miq_energy;

print_header('gpu');
rng(SEED);
[alpha_P2,beta_P2,~,E_hist2,m_hist2] = IOQ_highgenus_gpu(V, F, ...
    'Laplacian', LAP_TYPE,...
    'Plot', PLOT,...
    'Iterations', N_ITER, ...
    'highg_method', 'option2_optimized', ...
    'beta_P', INIT_BETA_P, ...
    'n_alternating', 2);
k2 = [alpha_P2; beta_P2];
m2 = TCODS(m, 'k', k2, 'f0', FACE0, 'theta0', THETA0, 'degree', DEGREE, 'CreateFField', true);
E2 = m2.miq_energy;

assert(check_norm('E1', 'E2', 'Log', -1), 'Option 2 optimized failed!');

print_header('Option 2 (n=1), bsx');

print_header('cpu');
rng(SEED);
[alpha_P1,beta_P1,~,E_hist1,m_hist1] = IOQ_highgenus(V, F, ...
    'Laplacian', LAP_TYPE,...
    'Plot', PLOT,...
    'Iterations', N_ITER, ...
    'highg_method', 'option2_optimized', ...
    'beta_P', INIT_BETA_P);
k1 = [alpha_P1; beta_P1];
m1 = TCODS(m, 'k', k1, 'f0', FACE0, 'theta0', THETA0, 'degree', DEGREE, 'CreateFField', true);
E1 = m1.miq_energy;

print_header('gpu');
rng(SEED);
[alpha_P2,beta_P2,~,E_hist2,m_hist2] = IOQ_highgenus_gpu(V, F, ...
    'Laplacian', LAP_TYPE,...
    'Plot', PLOT,...
    'Iterations', N_ITER, ...
    'highg_method', 'option2_optimized', ...
    'beta_P', INIT_BETA_P, ...
    'bsx', true);
k2 = [alpha_P2; beta_P2];
m2 = TCODS(m, 'k', k2, 'f0', FACE0, 'theta0', THETA0, 'degree', DEGREE, 'CreateFField', true);
E2 = m2.miq_energy;

assert(check_norm('E1', 'E2', 'Log', -1), 'Option 2 optimized failed!');

%% Option 3

print_header('Option 3 (n=1), kernel');

print_header('cpu');
rng(SEED);
[alpha_P1,beta_P1,~,E_hist1,m_hist1] = IOQ_highgenus(V, F, ...
    'Laplacian', LAP_TYPE,...
    'Plot', PLOT,...
    'Iterations', N_ITER, ...
    'highg_method', 'option3_optimized', ...
    'beta_P', INIT_BETA_P);
k1 = [alpha_P1; beta_P1];
m1 = TCODS(m, 'k', k1, 'f0', FACE0, 'theta0', THETA0, 'degree', DEGREE, 'CreateFField', true);
E1 = m1.miq_energy;
assert(check_norm('E1', '12.605217494355530405', 'Log', -1, 'Tol', 1e-10));

print_header('gpu');
rng(SEED);
[alpha_P2,beta_P2,~,E_hist2,m_hist2] = IOQ_highgenus_gpu(V, F, ...
    'Laplacian', LAP_TYPE,...
    'Plot', PLOT,...
    'Iterations', N_ITER, ...
    'highg_method', 'option3_optimized', ...
    'beta_P', INIT_BETA_P);
k2 = [alpha_P2; beta_P2];
m2 = TCODS(m, 'k', k2, 'f0', FACE0, 'theta0', THETA0, 'degree', DEGREE, 'CreateFField', true);
E2 = m2.miq_energy;

assert(check_norm('E1', 'E2', 'Log', -1), 'Option 3 optimized failed!');

print_header('Option 3 (n=2) optimized, kernel');

print_header('cpu');
rng(SEED);
[alpha_P1,beta_P1,~,E_hist1,m_hist1] = IOQ_highgenus(V, F, ...
    'Laplacian', LAP_TYPE,...
    'Plot', PLOT,...
    'Iterations', N_ITER, ...
    'highg_method', 'option2_optimized', ...
    'beta_P', INIT_BETA_P, ...
    'n_alternating', 2);
k1 = [alpha_P1; beta_P1];
m1 = TCODS(m, 'k', k1, 'f0', FACE0, 'theta0', THETA0, 'degree', DEGREE, 'CreateFField', true);
E1 = m1.miq_energy;

print_header('gpu');
rng(SEED);
[alpha_P2,beta_P2,~,E_hist2,m_hist2] = IOQ_highgenus_gpu(V, F, ...
    'Laplacian', LAP_TYPE,...
    'Plot', PLOT,...
    'Iterations', N_ITER, ...
    'highg_method', 'option2_optimized', ...
    'beta_P', INIT_BETA_P, ...
    'n_alternating', 2);
k2 = [alpha_P2; beta_P2];
m2 = TCODS(m, 'k', k2, 'f0', FACE0, 'theta0', THETA0, 'degree', DEGREE, 'CreateFField', true);
E2 = m2.miq_energy;

assert(check_norm('E1', 'E2', 'Log', -1), 'Option 3 optimized failed!');

print_header('Option 3 (n=1) optimized, bsx');

print_header('cpu');
rng(SEED);
[alpha_P1,beta_P1,~,E_hist1,m_hist1] = IOQ_highgenus(V, F, ...
    'Laplacian', LAP_TYPE,...
    'Plot', PLOT,...
    'Iterations', N_ITER, ...
    'highg_method', 'option3_optimized', ...
    'beta_P', INIT_BETA_P);
k1 = [alpha_P1; beta_P1];
m1 = TCODS(m, 'k', k1, 'f0', FACE0, 'theta0', THETA0, 'degree', DEGREE, 'CreateFField', true);
E1 = m1.miq_energy;

print_header('gpu');
rng(SEED);
[alpha_P2,beta_P2,~,E_hist2,m_hist2] = IOQ_highgenus_gpu(V, F, ...
    'Laplacian', LAP_TYPE,...
    'Plot', PLOT,...
    'Iterations', N_ITER, ...
    'highg_method', 'option3_optimized', ...
    'beta_P', INIT_BETA_P, ...
    'bsx', true);
k2 = [alpha_P2; beta_P2];
m2 = TCODS(m, 'k', k2, 'f0', FACE0, 'theta0', THETA0, 'degree', DEGREE, 'CreateFField', true);
E2 = m2.miq_energy;

assert(check_norm('E1', 'E2', 'Log', -1), 'Option 2 optimized failed!');
